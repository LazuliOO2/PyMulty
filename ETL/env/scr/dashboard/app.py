import streamlit as st
import pandas as pd
from dotenv import load_dotenv
from sqlalchemy import create_engine
import os

load_dotenv(dotenv_path="../transform/.env")

print("HOST:", os.getenv("MYSQL_HOST"))
print("PORT:", os.getenv("MYSQL_PORT"))
print("USER:", os.getenv("MYSQL_USER"))
print("DATABASE:", os.getenv("MYSQL_DATABASE"))
# Vari√°veis de ambiente
host = os.getenv("MYSQL_HOST")
port = int(os.getenv("MYSQL_PORT"))
user = os.getenv("MYSQL_USER")
password = os.getenv("MYSQL_PASSWORD")
database = os.getenv("MYSQL_DATABASE")

engine = create_engine(f'mysql+pymysql://{user}:{password}@{host}:{port}/{database}')

df = pd.read_sql_query("SELECT * FROM produtos", engine)
# cria titulos
st.title('üìä Pesquisa de Mercado - Notebooks no Mercado Livre')
# Cria um subtitulos
st.subheader('üí° KPIs principais')
# Cria tr√™s colunas de largura igual na interface.As vari√°veis col1, col2 e col3 representam cada uma das colunas, permitindo adicionar conte√∫do espec√≠fico em cada uma delas.
col1, col2, col3 = st.columns(3)
# KPI 1: N√∫mero total de itens
# O m√©todo shape retorna uma tupla com o n√∫mero de linhas e colunas do DataFrame.[0] acessa primeiro elemento da tupla
total_itens = df.shape[0]
#  m√©todo metric √© usado para exibir um valor num√©rico com um r√≥tulo (label) em um painel interativo.
# value=total_itens: Define o valor que ser√° exibido. Nesse caso, √© o n√∫mero total de linhas do DataFrame (total_itens).
col1.metric(label="üñ•Ô∏è Total de Notebooks", value=total_itens)

# KPI 2: N√∫mero de marcas √∫nicas
# Calcula o n√∫mero de valores √∫nicos na coluna 'brand' do DataFrame 'df'.
unique_brands = df['brand'].nunique()
# Exibe o n√∫mero de marcas √∫nicas como uma m√©trica em uma das colunas da interface (col2).
# 'label' define o texto que aparece acima do valor da m√©trica.
# 'value' define o valor num√©rico a ser exibido.
col2.metric(label="üè∑Ô∏è Marcas √önicas", value=unique_brands)

# KPI 3: Pre√ßo m√©dio novo (em reais)
# Calcula a m√©dia dos valores na coluna 'new_price' do DataFrame 'df'.
average_new_price = df['new_price'].mean()
# Exibe o pre√ßo m√©dio como uma m√©trica em outra coluna da interface (col3).
# 'label' define o texto que aparece acima do valor da m√©trica.
# 'value' define o valor a ser exibido, formatado para duas casas decimais e precedido por "R$".
f"{average_new_price:.2f}"
col3.metric(label="üí∞ Pre√ßo M√©dio (R$)", value=f"{average_new_price:.2f}")

# Marcas mais frequentes
# Define um subt√≠tulo para a se√ß√£o de marcas mais frequentes.
st.subheader('üèÜ Marcas mais encontradas at√© a 10¬™ p√°gina')
# Cria duas colunas com propor√ß√µes de largura 4:2 na interface.
col1, col2 = st.columns([4, 2])
# Conta a frequ√™ncia de cada valor √∫nico na coluna 'brand' e ordena em ordem decrescente.
top_brands = df['brand'].value_counts().sort_values(ascending=False)
# Exibe um gr√°fico de barras na primeira coluna (col1) mostrando a frequ√™ncia das marcas.
col1.bar_chart(top_brands)
# Exibe os dados de frequ√™ncia das marcas como texto na segunda coluna (col2).
col2.write(top_brands)

# Pre√ßo m√©dio por marca
# Define um subt√≠tulo para a se√ß√£o de pre√ßo m√©dio por marca.
st.subheader('üíµ Pre√ßo m√©dio por marca')
# Cria duas colunas com propor√ß√µes de largura 4:2 na interface.
col1, col2 = st.columns([4, 2])
# Cria um novo DataFrame contendo apenas as linhas onde o pre√ßo ('new_price') √© maior que zero.
df_non_zero_prices = df[df['new_price'] > 0]
# Agrupa o DataFrame 'df_non_zero_prices' pela coluna 'brand', calcula a m√©dia da coluna 'new_price' para cada grupo e ordena em ordem decrescente.
average_price_by_brand = df_non_zero_prices.groupby('brand')['new_price'].mean().sort_values(ascending=False)
# Exibe um gr√°fico de barras na primeira coluna (col1) mostrando o pre√ßo m√©dio por marca.
col1.bar_chart(average_price_by_brand)
# Exibe os dados do pre√ßo m√©dio por marca como texto na segunda coluna (col2).
col2.write(average_price_by_brand)

# Satisfa√ß√£o m√©dia por marca
# Define um subt√≠tulo para a se√ß√£o de satisfa√ß√£o m√©dia por marca.
st.subheader('‚≠ê Satisfa√ß√£o m√©dia por marca')
# Cria duas colunas com propor√ß√µes de largura 4:2 na interface.
col1, col2 = st.columns([4, 2])
# Cria um novo DataFrame contendo apenas as linhas onde o n√∫mero de avalia√ß√µes ('reviews_rating_number') √© maior que zero.
df_non_zero_reviews = df[df['reviews_rating_number'] > 0]
# Agrupa o DataFrame 'df_non_zero_reviews' pela coluna 'brand', calcula a m√©dia da coluna 'reviews_rating_number' para cada grupo e ordena em ordem decrescente.
satisfaction_by_brand = df_non_zero_reviews.groupby('brand')['reviews_rating_number'].mean().sort_values(ascending=False)
# Exibe um gr√°fico de barras na primeira coluna (col1) mostrando a satisfa√ß√£o m√©dia por marca.
col1.bar_chart(satisfaction_by_brand)
# Exibe os dados da satisfa√ß√£o m√©dia por marca como texto na segunda coluna (col2).
col2.write(satisfaction_by_brand)